import Pkg
Pkg.status()
using PyCall
struct hello
    bob 
    anyay
end
g=hello(45,true)
println(g)
g.anyay
typeof([12,13,23,45])
typeof(5)
typeof("5.23")
typeof(true)


#second_tut
function addnumbers(numberone,numberttwo)
    numberone+=numberttwo
    return(numberone)
end
println(addnumbers(5,12))
fifteen=sum([5,10]) 
array= 10,12,14
'a'
if 20/5==5
    println("the value is 5")
elseif 20/4==5
    println("the final value is 5")
else
    println("bhaad main ja")
end
function checknumber(num)
    if num > 6
        println("Greater than 6")
    else
        println("out of range")
    end
    if num > 10
        println("Greater than 10")
    end
    if num > 15
        println("Greater than 15")
    end
end
checknumber(12)
    
#third_tut
#iterative loop
for i in 1:223
    println(i)
end
#while loop
#while true
number=5
while number<=12
    number+=1
    println(number)
    break
end
#recursive loop
function factori(n)
    if n==1#conditional boolean
        return(1)
    else
        return n*factori(n-1)
    end   
end
factori(12)

array=[14,12,1,15,16]
for number in array
    if number==1
        println(number)
    elseif number>1
        println("the number is greater than 1")
    end
end 
newarray=[]
for number in array
    if number==1
        append!(newarray,number)
    elseif number>1
        append!(newarray,number)
        println("the number is greater than 1")
    end
    println(newarray)
end 

#we can loop throurgh pairs, dictionary, array, string,list
#zip
array2=[02,14,12,17,25]
for (i,j) in zip(array,array2)
    println(i,j)
end

#tut_4
function filterstring(input)
    validchar=['H','W','D','E']
    for character in input
        if character in validchar
            print(character)
        end
    end
end 
filterstring("HELLOWORLD")  
function std(array_n)
    m=mean(array_n)
    [i=(i-m)^2 for i in array_n]
    #m=mean(array_n)
    m=sqrt(complex(m))
    return(m)    
end   

mean(x)=sum(x)/length(x)
#=function normalise(array)
    q=std(array)
    avg=mean(array)
    [i=(i-avg)/q for i in array]
end=#

normalise(x)=[i=(i-mean(x))/std(x) for i in x]
normalise([5,10,15]) 

function print_symbol(syymb)
    syymb=string(syymb)
    for char in syymb
        println(char)
    end
end

function print_sybol(symb ::String)
    for char in symb
        println(char)
    end
end
print_symbol(:HI)
#print_sybol(:HI)#THIS WILL SHOW ERROR
#DISPATCH
prints(symb::Symbol)=print_symbol(symb)
prints(:HELLOFNDSJN)
prints(symb::String)=print_sybol(symb)
prints("sdfgaddhs")

#tut_5
typeof(true)
Bool(1)
typeof(25)
typeof(5.5)
typeof(52.02+55.15im)
typeof(big(665655))   
typeof(big(6.65655))
typeof(:Symb) 
typeof("hello") 
typeof('5') 
element_=[10,12,14,14]
d=10,23,23
typeof(d)
append!(element_,25)
push!(element_,25)
print(element_)
#dictionary
data=Dict(:a=>[4,25,25],:b=>[21,14,25])
data[:a]

#pairs
(:av=>5)
#set
array__=[2,12,14,15,45,16,14]
Set(array__)

struct marzi
    h
    c
end

marzi(21,25)
q=marzi(21,25)
q.h

function addmarzi(marzi)
    return(marzi.h+marzi.c)
    
end
addedmarzi=addmarzi(q)

#tut_6
using Compose:compose
composition=compose(context(),rectangle(),fill("red"))
composition=compose(context(),rectangle(0.45,.5,25px,15px),
rectangle(0.25,.5,25px,15px),rectangle(0.65,.5,25px,15px),fill("red"))
import Compose:rectangle
rectangle(x::Float64,y::Float64)=rectangle(x,y,50px,90px)
composition=compose(context(),rectangle(0.45,.5,25px,15px),
rectangle(0.25,.5),rectangle(0.65,.5),fill("red"))
